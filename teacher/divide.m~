% Test this function with the matrix of the exercise
%n = 100
%T = full(gallery('tridiag',n,-1,2,-1));
%%%%%%%%% In order to test your implementation, compare as follows
%[Q,L] = divide(T);
%max(abs(sort(diag(L))-eig(T)))

function [Q,L] = divide(T)

tol = 1e-6;
if (length(T) == 1)
    L = T;
    Q = 1;
else 
    %%%%%%%%%%%%%%%%%%%%%% Partitioning of T %%%%%%%%%%%%%%%%%%%%%%%
    n = length(T);
    if (mod(n,2) == 0)
        m = n/2;
    else
        m = (n-1)/2;
    end
    T1 = T(1:m,1:m);
    rho = abs(T(m,m+1));
    T1(m,m) = T1(m,m) - rho;
    T2 = T(m+1:n,m+1:n);
    T2(1,1) = T2(1,1) - rho;
    
    
    %%%%%%%%%%%% Call of the algorithm on T1 and T2 %%%%%%%%%%%%%%%%
    [Q1,L1] = divide(T1);  % Q1 is mxm
    [Q2,L2] = divide(T2);  % Q2 is (m(+1))x(m(+1))
    
    %%%%%%%%%%%%%%%%%%%%% Shaping of D and v %%%%%%%%%%%%%%%%%%%%%%%
    D = zeros(n,n);
    D(1:m,1:m) = L1;
    D(m+1:n,m+1:n) = L2;
    v  = [sign(T(m,m+1))*Q1(end,:),Q2(1,:)]';
    
    %%%%%%%%%%%%%%%%%%%%% Reordering %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Used to make deflation step faster, we sort D as explainded in 
    % the lecture notes, and then we 
    DiagD = diag(D);
    [Dsorted,ind] = sort(DiagD);   
    D = diag(Dsorted);
    v = v(ind);
    
    %%%%%%%%%%%%%%%%%%%%%%% Deflation step %%%%%%%%%%%%%%%%%%%%%%%%%
    [D,v,v_prime,eigenvalues,eigenvectors, n_deflated, G] = deflation2(D,length(D),v);
    % [~,~,eigenvalues,eigenvectors] = deflation(D,length(D),v,rho,theta,[],[],1);
    
    %%%%%%%%%%%%%% Find the eigenvalues of D+rho*v*v' %%%%%%%%%%%%%%
    %%%%%%%% They are the solutions of the secular equation %%%%%%%%
    
    
    % We use the solver for the secular equation as explained in the
    % lecture notes
    
    d = diag(D);                                            % column vector
    lambda = zeros(n_deflated,1);
    for i = 1 : n_deflated
        if i == n_deflated
            % artificial pole - created to apply the solver to find the
            % very last eigenvalue
            dn=D(n_deflated,n_deflated)+norm(v)^2;
            lambda_init = (D(n_deflated,n_deflated)+dn)/2;
        else
            lambda_init = (D(i,i)+D(i+1,i+1))/2;
        end
        % Compute root of secular equation
        lambda(i) =  find_root(rho, d, v_prime', i, lambda_init,n_deflated);
    end
    
    %%%%%%%%%%%%% Find the eigenvectors of D+rho*v*v' %%%%%%%%%%%%%%
    % Find eigenvectors corresponding to non deflated cases
    % Note that we complete the matrices eigenvectors and eigenvalues
    % coming out from the function deflation2
    
    % Compute eigenvectors according to Gu and Eisenstat (stable computation, see Arbenz lecture notes)
    v_hat = zeros(n_deflated,1);
    for k = 1:n_deflated
        if k==1
            v_hat(k)=sign(v_prime(k))*sqrt(prod(lambda-d(k))/(rho*prod(d(2:end)-d(k))));
        else
            v_hat(k)=sign(v_prime(k))*sqrt((prod(d(k)-lambda(1:k-1))*prod(lambda(k:n_deflated)-d(k)))/(rho*prod(d(k)-d(1:k-1))*prod(d(k+1:n_deflated)-d(k))));
        end
    end
    jj = 1;
    for i=1:n
        if abs( v(i)) >= tol
            % Eigenpair for non deflated case
            eigenvalues(i,i) = lambda(jj);
            temp = (lambda(jj)*eye(n_deflated)-D)\v_hat;
            jj = jj+1;
            temp_prime = zeros(n,1);
            kk = 1;
            for j = 1: n
                if abs( v(j)) < tol
                    temp_prime(j) = 0;
                else
                    temp_prime(j) = temp(kk);
                    kk = kk+1;
                end
            end
            eigenvectors(:,i)=temp_prime/norm(temp_prime);
        end
    end
    
    % Permute and rotate back
    eigenvectors = G*eigenvectors;
    P = eye(n);
    P = P(ind,:);
    [eigenvalues,ind_] = sort(diag(eigenvalues));
    P_ = eye(n);
    P_ = P_(ind_,:);
    eigenvectors = eigenvectors*P_;
    eigenvalues = diag(eigenvalues);
    eigenvalues = P'*eigenvalues*P;
    eigenvectors = P'*eigenvectors*P;
    L = eigenvalues;
    
    %%%%%%%%%%% Form the matrix of the eigenvectors of T %%%%%%%%%%%
    Q = zeros(n,n);
    Q(1:m,1:m) = Q1;
    Q(m+1:n,m+1:n) = Q2;
    Q = Q*eigenvectors;
    
end
end



function [ root ] = find_root( rho, d, v, i, lambda_init,n)
% Compute the root of the secular equation according to chapter 4.6
tol = 1e-4;
error = 1;
iter=1;
while(error > tol)
    c_1 = sum(v(1:i).^2./(d(1:i)-lambda_init).^2)*(d(i)-lambda_init)^2;
    c_1_hat = sum(v(1:i).^2.*(d(1:i)-d(i))./(d(1:i)-lambda_init).^2);
    if i == n
        lambda_init = (c_1*rho+c_1_hat*rho*d(n)+d(n))/(1+rho*c_1_hat);
        error = abs(1/rho+ sum(v(1:end).^2./(d(1:end)-lambda_init)));
    else
        c_2 = sum(v(i+1:end).^2./(d(i+1:end)-lambda_init).^2)*(d(i+1)-lambda_init)^2;
        c_2_hat = sum(v(i+1:end).^2.*(d(i+1:end)-d(i+1))./(d(i+1:end)-lambda_init).^2);
        c_3 = 1/rho+(c_1_hat+c_2_hat);
        p = -(c_1+c_2+c_3*d(i+1)+c_3*d(i))/c_3;
        q = (c_1*d(i+1)+c_2*d(i)+c_3*d(i)*d(i+1))/c_3;
        root_1 = -p/2+sqrt(p^2/4-q);
        root_2 = -p/2-sqrt(p^2/4-q);
        if d(i) <= root_1 && root_1 <= d(i+1)
            lambda_init = root_1;
        else
            lambda_init = root_2;
        end
        
        error = abs(1/rho+ sum(v(1:end).^2./(d(1:end)-lambda_init)));
    end
    iter=iter+1;
end
root = lambda_init;
end

